@startuml 104_unassignAllAutomationsFromLinks
skinparam responseMessageBelowArrow true

title
RequestForUnassigningAllAutomationsFromLinksCausesListUpdateAndPersistentDeactivation
end title

participant "external" as requestor
participant "AIPS://v1/unassign-all-automations-from-links" as unassignAutomation
participant "AIPS://v1/list-links" as listLinks
participant "AIPS://v1/remove-links-from-power-saving-activation-queue" as stopSimpleActivation
participant "AIPS://v1/add-links-to-power-saving-deactivation-queue" as startPersistentDeactivation

requestor -> unassignAutomation: {linkIdList}
activate unassignAutomation

'get current assignments from staticList
note over unassignAutomation
  <u>GetCurrentAssignments</u>
  capture current state before deleting assignments
  from staticList; required for async power saving
  switch-off
end note
unassignAutomation -> listLinks: {linkIdList}
listLinks --> unassignAutomation: {list-of-(linkId,automationNamesList)}

'update staticList by deleting automationNames
note over unassignAutomation
  empty the automationNameList in staticList
  for all linkIds of linkIdList
end note

'stop ongoing/planned power saving
note over unassignAutomation
  FOR each linkId from linkIdList
    FOR each automationName from linkId.automationNamesList
        build pair (linkId, automationName),
        <u>RemoveFrom<b>Activation</b>Queue</u>
end note
unassignAutomation -> stopSimpleActivation: {linkId, automationName}
stopSimpleActivation --> unassignAutomation

'initiate persistentDeactivation to turn power saving off
note over unassignAutomation
  FOR each pair (linkId, automationName)
  from previous step
  <u>AddTo<b>Deactivation</b>Queue</u>
end note
unassignAutomation -> startPersistentDeactivation: {linkId, automationName, switchingOperationName="PersistentDeactivation"}


deactivate unassignAutomation

@enduml