@startuml 4xx_cyclicOperationOnPowerSavingDectivationQueue
skinparam responseMessageBelowArrow true

title
RequestForEmbeddingCausesCyclicOperationOnPowerSavingDeactivationQueue
end title

participant "RO" as ro
participant "AIPS://v1/embed-yourself" as embedYourself
participant "AIPS://v1/provide-power-saving-status-of-link" as listStatus
participant "AIPS://v1/remove-links-from-power-saving-deactivation-queue" as removeFromQueue
participant "AIPS://v1/reactivate-transmitters-of-link" as reactivateTransmitters

ro -> embedYourself
activate embedYourself 

note over embedYourself #lightBlue
  Variante 1: die PersistentDeactivation wird "irgendwie" angestoßen (unklar wo und wie) und arbeitet auf einer fixen Liste
              - es gibt im aktuellen Design nur eine Liste in der PersistentDeactivation, d.h. die kann sich dann 
                theoretisch auch zwischendrin ändern...
  Variante 2: es gibt einen zyklischen Prozess, der immer läuft und über die Liste iteriert
              - die Liste kann zwischendurch auch wachsen
              - die max. runtime müsste hierbei aber ggf. pro Record betrachtet werden, nicht für die ganze Liste

  hier Variante 2
end note

'cyclic operation starts
note over embedYourself
  CyclicOperation iterates over power saving deactivation queue
  (from PersistentDeactivation module)
  - queue records have the following columns:
    <i>linkId, automationName, switchingOperationName</i>
  - records are NOT unique
  - records are only deleted here due to successful power saving switch-off
end note

note over embedYourself #Pink: include max runtime check

'iterate over queue
group FOR each record in deactivationQueue 
  'get power saving status
  note over embedYourself
    <u>GetPowerSavingStatus</u>
  end note
  embedYourself -> listStatus: {linkId}
  listStatus --> embedYourself: {deviationsFromOriginalStateList, modulesToRestoreOriginalStateList}

  alt transmitters already switched on
    'check if already done
    note over embedYourself
      IF (<i>record.modulesToRestoreOriginalStateList</i> contains not
          <i>record.automationName</i>)
      THEN <u>RemoveRecordFromDeactivationQueue</u>
    end note
    embedYourself -> removeFromQueue: {linkId, automationName}

  else initiate transmitter switch-on
    'for all remaining entries
    note over embedYourself
      ELSE <u>AllTransmittersOn</u>
    end note
    embedYourself -> reactivateTransmitters: {linkId, automationName}
    reactivateTransmitters --> embedYourself: {responseCode}

    'if success remove from list
    note over embedYourself
      IF (AllTransmittersOn.responseCode == 200)
      THEN <u>RemoveRecordFromDeactivationQueue</u>        
    end note
    embedYourself -> removeFromQueue: {linkId, automationName}    
  end
end

deactivate embedYourself

@enduml