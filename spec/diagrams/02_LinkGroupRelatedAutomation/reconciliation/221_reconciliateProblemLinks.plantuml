@startuml 221_reconcilateProblemLinks
skinparam responseMessageBelowArrow true

title
RequestForReconciliationOfPowerSavingStatusCausesPersistentDeactivation
end title

participant "external" as requestor
participant "AIPS://v1/reconciliate-problem-links" as reconciliate
participant "AIPS://v1/list-to-be-restored-links" as listLinks
participant "AIPS://v1/remove-links-from-power-saving-activation-queue" as stopActivation
participant "AIPS://v1/add-links-to-power-saving-deactivation-queue" as startDeactivation

requestor -> reconciliate: {automationName, moduleToRestoreOriginalState}
activate reconciliate

'find links that need restoring
note over reconciliate
      <u>GetListOfLinksToBeRestored</u>
end note
reconciliate -> listLinks: {moduleToRestoreOriginalState}
listLinks --> reconciliate: {linkIdList}

'handling depends on the actual module name
== moduleToRestoreOriginalState is AllTransmittersOn ==

  'stop activation
  note over reconciliate
    IF(moduleToRestoreOriginalState == "AllTransmittersOn")
    THEN <u>RemoveFrom<b>Activation</b>Queue</u>
  end note
  reconciliate -> stopActivation: {linkIdList, automationName}
  stopActivation --> reconciliate

  'start deactivation
  note over reconciliate
     AND <u>AddTo<b>Deactivation</b>Queue</u>
  end note
  note over reconciliate #pink:  either use original automationName, or for better logging "reconciliation"
  reconciliate -> startDeactivation: {linkIdList, automationName="Reconciliation", switchingOperationName="PersistentDeactivation"}

== other modules handled separately ==

  'none so far

reconciliate --> requestor

deactivate reconciliate

@enduml