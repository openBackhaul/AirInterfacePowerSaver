@startuml 210_startTimeBasedPowerSaving
skinparam responseMessageBelowArrow true

title
RequestForStartingTimeBasedPowerSavingCausesCyclicOperation
end title

participant "external" as requestor
participant "AIPS://v1/start-time-based-power-saving" as startPsModule
participant "AIPS://v1/list-all-triggers" as listTriggers
participant "AIPS://v1/list-links-with-specific-automation-assigned" as listLinks
participant "AIPS://v1/add-links-to-power-saving-activation-queue" as startSimpleActivation
participant "AIPS://v1/remove-links-from-power-saving-activation-queue" as stopSimpleActivation
participant "AIPS://v1/add-links-to-power-saving-deactivation-queue" as startPersistentDeactivation


requestor -> startPsModule
activate startPsModule

== Cyclic Operation for getting triggers and time-monitoring ==

'open question:
note over listTriggers #Pink
 <b>TODO: clarify when triggers are fetched 
          (periodically? with integerProfile to configure time interval?)
end note

'get triggers
note over startPsModule
  <u>GetTriggers</u>
end note
startPsModule -> listTriggers
listTriggers --> startPsModule: {triggerList}


'monitor if any trigger is met
note over startPsModule
  cyclic operation to monitor the <i>time</i>:
  IF any ((startTrigger==<i>time</i>) 
          OR (endTrigger==<i>time</i>))
  THEN <u>GetLinkidList</u>
end note
startPsModule -> listLinks: {automationName="TimeBasedPowerSaving"}
listLinks --> startPsModule: {linkIdList}

== StartTrigger met: initiate power-saving switch-on ==
note over listTriggers #pink
  <b>to discuss:</b>
  - soll power-saving auch aktiviert werden, wenn keine EndTrigger definiert wurden?
  - das würde gehen, wenn man a) zu einer bestimmten Uhrzeit immer wieder anschalten wurde 
    oder b) nach einer bestimmten Zeit (ähnl. Wartungsfenster); 
    das könnte hier im Modul gemacht werden oder Teil vom Reconciliation-Modul sein
end note

'StartTrigger is met
note over startPsModule
  IF (met trigger == startTrigger)
  THEN <u>InitiatePowerSaving</u> and exit
end note
startPsModule -> startSimpleActivation: {linkIdList, automationName="TimeBasedPowerSaving", switchingOperationName="SimpleActivation"}
startPsModule --> requestor


== EndTrigger met: initiate power-saving switch-off ==

'EndTrigger is met: stop ongoing/planned power saving
note over startPsModule
  IF (met trigger == endTrigger)
    <u>RemoveFrom<b>Activation</b>Queue</u>
end note
startPsModule -> stopSimpleActivation: {linkdIdList, automationName="TimeBasedPowerSaving"}
stopSimpleActivation --> startPsModule

'EndTrigger is met: initiate power saving switch-off
note over startPsModule
  IF (met trigger == endTrigger)
    <u>AddTo<b>Deactivation</b>Queue</u> and exit
end note
startPsModule -> startPersistentDeactivation: {linkdIdList, automationName="TimeBasedPowerSaving", switchingOperationName="PersistentDeactivation"}
startPsModule --> requestor

deactivate startPsModule

footer

  Note: starting timeBasedPowerSaving does not mean, that power saving mode is only turned on, but also, that (if an endTrigger is met), power saving mode is also turned off again!
end footer

@enduml