@startuml 601_provideTransmitterStatusOfParallelLinks
skinparam responseMessageBelowArrow true

title
RequestForProvidingTransmitterStatusOfParallelLinksCausesReadingTransmitterStatusFromMwdi
end title

participant "external" as requestor
participant "AIPS://v1/provide-transmitter-status-of-parallel-links" as provideStatus
participant "MWDI://v1/provide-list-of-parallel-links" as mwdiParallelLink
participant "MWDI://core-model-1-4:network-control-domain=cache/link={uuid}" as resolver
participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mount-name}/logical-termination-point={uuid}/layer-protocol={local-id}/air-interface-2-0:air-interface-pac/air-interface-configuration?fields=transmission-mode-max" as mwdiAirIfConfig
participant "MWDI://core-model-1-4:network-control-domain=live/control-construct={mount-name}/logical-termination-point={uuid}/layer-protocol={local-id}/air-interface-2-0:air-interface-pac/air-interface-status?fields=interface-status;transmission-mode-cur" as mwdiAirIfStatus

requestor -> provideStatus: {linkId, own_IpAddress, own_TcpPort, own_responseServiceName}
activate provideStatus
provideStatus --> requestor: {requestId}

'get parallel link
note over provideStatus
  <u>GetParallelLinks</u>
end note
provideStatus -> mwdiParallelLink: {uuid=linkId}
mwdiParallelLink --> provideStatus: {list-of-(uuid=linkId, layerProtocolName)}

'return error if parallel link not found
note over provideStatus
  IF <i>GetParallelLinks</i> response is empty list
  THEN <u>Response</u>
end note
provideStatus -> requestor: {requestId, emptyList}

'if parallel links are found: find their address triples
note over provideStatus
  FOR each found parallel linkId
    WITH layerProtocolName=="AirLayer"
    <u>DetermineLinkEndpoints</u>
end note
provideStatus -> resolver: {uuid=linkId}
resolver --> provideStatus: {2x(mountName, uuid, localId)}

'fetch status/config info for parallel links
note over provideStatus
  FOR each found link endpoint
  <u>GetAirInterfaceConfigFromCache</u>
end note
provideStatus -> mwdiAirIfConfig: {mountName, uuid, localId}
mwdiAirIfConfig --> provideStatus: {transmissionModeMax}

note over provideStatus
  FOR each found link endpoint
  <u>GetAirInterfaceStatusFromLive</u>
end note
provideStatus -> mwdiAirIfStatus: {mountName, uuid, localId}
mwdiAirIfStatus--> provideStatus: {interfaceStatus, transmissionModeCur}

'check if data for both link endpoints matches and is complete
note over provideStatus
  IF (any responseCode != 200)
  THEN <u>Response</u>
end note
provideStatus -> requestor: {requestId, responseCode=404}

note over provideStatus
  ELSE <u>Response</u>
end note
provideStatus -> requestor: {requestId, list-of-((interfaceStatus, transmissionModeMax, transmissionModeCur)-sideA),\n                          (interfaceStatus, transmissionModeMax, transmissionModeCur)-sideB)}

deactivate provideStatus 
@enduml